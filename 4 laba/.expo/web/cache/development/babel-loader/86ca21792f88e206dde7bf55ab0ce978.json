{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\\\u0443\\u0447\\u0451\\u0431\\u0430\\\\\\u043C\\u043E\\u0431\\u0438\\u043B\\u043A\\u0430\\\\MoscowPolytech\\\\Mobile Development\\\\ex4\\\\App.js\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[typeof Symbol === \"function\" ? Symbol.toPrimitive : \"@@toPrimitive\"]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport uuid from 'uuid-random';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Contact from \"./components/Contact\";\nvar initialContacts = [{\n  id: 0,\n  name: 'Григорий',\n  surname: 'Иванов',\n  phone: '+7-ххх-хх-хх'\n}, {\n  id: 1,\n  name: 'Кебаб',\n  surname: 'Жаренный',\n  phone: '+7-ххх-хх-хх'\n}];\nvar App;\n\nApp = function App() {\n  var _useState = useState(initialContacts),\n      _useState2 = _slicedToArray(_useState, 2),\n      contacts = _useState2[0],\n      setContacts = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFormOpened = _useState4[0],\n      setIsFormOpened = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoaded = _useState6[0],\n      setIsLoaded = _useState6[1];\n\n  useEffect(function () {\n    loadContacts();\n  }, []);\n  useEffect(function () {\n    updateContacts();\n  }, [contacts]);\n\n  var loadContacts = function loadContacts() {\n    var data;\n    return _regeneratorRuntime.async(function loadContacts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('contacts'));\n\n          case 3:\n            data = _context.sent;\n            data && setContacts(JSON.parse(data));\n            setIsLoaded(true);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var updateContacts = function updateContacts() {\n    return _regeneratorRuntime.async(function updateContacts$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('contacts', JSON.stringify(contacts)));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onFormChange = function onFormChange() {\n    setIsFormOpened(function (prevState) {\n      return !prevState;\n    });\n  };\n\n  var onContactAdd = function onContactAdd(name, surname, phone) {\n    var id = uuid();\n    setContacts(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, id, {\n        id: id,\n        name: name,\n        surname: surname,\n        phone: phone\n      }));\n    });\n  };\n\n  var onContactEdit = function onContactEdit(id, name, surname, phone) {\n    setContacts(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, id, {\n        id: id,\n        name: name,\n        surname: surname,\n        phone: phone\n      }));\n    });\n  };\n\n  var onContactDelete = function onContactDelete(id) {\n    var deletedValue = contacts[id],\n        newState = _objectWithoutProperties(contacts, [id].map(_toPropertyKey));\n\n    setContacts(newState);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), isLoaded && React.createElement(FlatList, {\n    data: Object.values(contacts),\n    renderItem: function renderItem(_ref) {\n      var _ref$item = _ref.item,\n          id = _ref$item.id,\n          name = _ref$item.name,\n          surname = _ref$item.surname,\n          phone = _ref$item.phone;\n      return React.createElement(Contact, {\n        id: id,\n        name: name,\n        surname: surname,\n        phone: phone,\n        onContactDelete: onContactDelete,\n        onContactEdit: onContactEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }), !isFormOpened ? React.createElement(TouchableOpacity, {\n    style: styles.addButton,\n    onPress: onFormChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#fff',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442\")) : React.createElement(Form, {\n    onFormChange: onFormChange,\n    onFormSubmit: onContactAdd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  addButton: {\n    backgroundColor: '#545454',\n    padding: 15\n  }\n});\nexport default App;","map":{"version":3,"sources":["C:/Users/User/Desktop/учёба/мобилка/MoscowPolytech/Mobile Development/ex4/App.js"],"names":["React","useState","useEffect","uuid","AsyncStorage","Header","Form","Contact","initialContacts","id","name","surname","phone","App","contacts","setContacts","isFormOpened","setIsFormOpened","isLoaded","setIsLoaded","loadContacts","updateContacts","getItem","data","JSON","parse","console","error","setItem","stringify","onFormChange","prevState","onContactAdd","onContactEdit","onContactDelete","deletedValue","newState","flex","Object","values","item","styles","addButton","color","textAlign","StyleSheet","create","backgroundColor","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport uuid from 'uuid-random'\r\nimport { TouchableOpacity, Text, View, FlatList, StyleSheet } from 'react-native'\r\nimport AsyncStorage from '@react-native-community/async-storage'\r\nimport Header from './components/Header'\r\nimport Form from './components/Form'\r\nimport Contact from './components/Contact'\r\n\r\nconst initialContacts = [\r\n  {\r\n    id: 0,\r\n    name: 'Григорий',\r\n    surname: 'Иванов',\r\n    phone: '+7-ххх-хх-хх'\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'Кебаб',\r\n    surname: 'Жаренный',\r\n    phone: '+7-ххх-хх-хх'\r\n  },\r\n];\r\n\r\nlet App;\r\nApp = () => {\r\n  const [contacts, setContacts] = useState(initialContacts);\r\n  const [isFormOpened, setIsFormOpened] = useState(false);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadContacts()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateContacts()\r\n  }, [contacts]);\r\n\r\n  const loadContacts = async () => {\r\n    try {\r\n      const data = await AsyncStorage.getItem('contacts');\r\n      data && setContacts(JSON.parse(data));\r\n      setIsLoaded(true)\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  };\r\n\r\n  const updateContacts = async () => {\r\n    await AsyncStorage.setItem('contacts', JSON.stringify(contacts))\r\n  };\r\n\r\n  const onFormChange = () => {\r\n    setIsFormOpened(prevState => !prevState)\r\n  };\r\n\r\n  const onContactAdd = (name, surname, phone) => {\r\n    const id = uuid();\r\n    setContacts(prevState => ({\r\n      ...prevState,\r\n      [id]: {id, name, surname, phone}\r\n    }))\r\n  };\r\n\r\n  const onContactEdit = (id, name, surname, phone) => {\r\n    setContacts(prevState => ({\r\n      ...prevState,\r\n      [id]: {id, name, surname, phone}\r\n    }))\r\n  };\r\n\r\n  const onContactDelete = id => {\r\n    const {[id]: deletedValue, ...newState} = contacts;\r\n    setContacts(newState)\r\n  };\r\n\r\n  return (\r\n      <View style={{flex: 1}}>\r\n        <Header/>\r\n        {\r\n          isLoaded && (\r\n              <FlatList\r\n                  data={Object.values(contacts)}\r\n                  renderItem={({item: {id, name, surname, phone}}) => {\r\n                    return (\r\n                        <Contact\r\n                            id={id}\r\n                            name={name}\r\n                            surname={surname}\r\n                            phone={phone}\r\n                            onContactDelete={onContactDelete}\r\n                            onContactEdit={onContactEdit}\r\n                        />\r\n                    )\r\n                  }}\r\n              />\r\n          )\r\n        }\r\n        {\r\n          !isFormOpened\r\n              ? (\r\n                  <TouchableOpacity\r\n                      style={styles.addButton}\r\n                      onPress={onFormChange}\r\n                  >\r\n                    <Text style={{color: '#fff', textAlign: 'center'}}>Добавить контакт</Text>\r\n                  </TouchableOpacity>\r\n              )\r\n              : (\r\n                  <Form\r\n                      onFormChange={onFormChange}\r\n                      onFormSubmit={onContactAdd}\r\n                  />\r\n              )\r\n        }\r\n      </View>\r\n  )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  addButton: {\r\n    backgroundColor: '#545454',\r\n    padding: 15,\r\n  }\r\n});\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}